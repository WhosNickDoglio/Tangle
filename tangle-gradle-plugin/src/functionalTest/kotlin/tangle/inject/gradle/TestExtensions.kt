/*
 * Copyright (C) 2025 Rick Busarow
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tangle.inject.gradle

import io.kotest.matchers.shouldBe
import io.kotest.matchers.string.shouldContain
import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.intellij.lang.annotations.Language
import java.io.File
import io.kotest.matchers.shouldBe as kotestShouldBe

@Language("RegExp")
internal fun BuildResult.tangleDeps(): List<String> =
  output
    .replace("[\\s\\S]*> Task :module:\\S*\\s*".toRegex(), "")
    .replace(
      "\\s*BUILD SUCCESSFUL in .*\\s*\\d* actionable task: \\d* executed\\s*".toRegex(),
      ""
    )
    .lines()
    .filterNot { it.isBlank() }
    .filterNot { it.startsWith("api androidx") }
    .filterNot { it.contains("com.squareup.anvil") }
    .filter { it.startsWith("implementation") || it.startsWith("api") || it.startsWith("anvil") }
    .sorted()

internal fun GradleRunner.shouldFailWithMessage(expectedMessage: String) {
  val result = buildAndFail()

  result.tasks.forEach { it.outcome shouldBe TaskOutcome.FAILED }

  result.output.fixPath() shouldContain expectedMessage
}

internal infix fun <T, U : T> T.shouldBe(expected: U?) {
  /*
  Any AssertionError generated by this function will have this function at the top of its stacktrace.

  The actual call site for the assertion is always the _second_ line.

  So, we can catch the assertion error, remove this function from the stacktrace, and rethrow.
   */
  try {
    kotestShouldBe(expected)
  } catch (assertionError: AssertionError) {
    // remove this function from the stacktrace and rethrow
    assertionError.stackTrace =
      assertionError
        .stackTrace
        .drop(1)
        .toTypedArray()
    throw assertionError
  }
}

private fun String.fixPath(): String = replace(File.separator, "/")
